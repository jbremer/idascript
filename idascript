#!/usr/bin/env python

# Python version of the idascript utility for IDA.
# Original idascript utility: http://www.hexblog.com/?p=128
#
# Craig Heffner (added linux support)
# 14-November-2012
# http://www.tacnetsol.com
# http://www.devttys0.com
#
# Jurriaan Bremer (modified some path stuff, and hardcoded some stuff..)
# http://jbremer.org/

import os
import sys
import subprocess

OUTFILE = os.path.join(os.getenv('TEMP'), 'idaout.txt')
IDA_INSTALL_PATH = 'C:/ProgFiles86/ida61'


def usage():
    path = os.path.basename(sys.argv[0])
    print 'Usage: %s [-64] <idb-file> <script-file> [script arguments]' % path
    print '-64 switches to 64-bit support (e.g. idaq64)'
    sys.exit(1)

# Check usage
if len(sys.argv) < 3:
    usage()

idx = 1

is_64 = False
if sys.argv[idx] == '-64':
    is_64 = True
    idx += 1

# Get IDB / script file from command line
idb = os.path.abspath(sys.argv[idx])
idc = os.path.abspath(sys.argv[idx + 1])
idc_args = sys.argv[idx + 2:]

if not os.path.exists(idb):
    print '%s is not a valid idb path' % idb
    usage()

if not os.path.exists(idc) or 0:
    print '%s is not a valid idc path' % idc
    usage()

# Use idaq or idaq64, depending on the IDB file extension
ida = 'idaq' if not is_64 else 'idaq64'

if sys.platform == 'win32':
    ida += '.exe'

# Clean up output file, just in case
if os.path.exists(OUTFILE):
    os.unlink(OUTFILE)

# Run IDA
subprocess.call([os.path.join(IDA_INSTALL_PATH, ida), '-A',
                 '-S' + idc + ' ' + ' '.join(idc_args), idb])

# Display contents of output file, then clean up
if os.path.exists(OUTFILE):
    sys.stderr.write(open(OUTFILE).read())
    os.unlink(OUTFILE)
